@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Reading Bus Departure Times</title>
    @Styles.Render("~/Content/css2")
</head>
<body>
    <h1>
        Routes
    </h1>
    <div>
        <select data-bind="options: routes,
                            value: selectedRoute,
                            optionsCaption: 'Choose...'" autofocus></select>
        @*<p data-bind="text: selectedRoute() ? selectedRoute() : 'unknown' ">
        </p>*@
    </div>
    <div data-bind="if: selectedRoute()">
        <div data-bind="if: !locker()">
            <h1 data-bind="text: departureRoute"></h1>
            <h2>
                Departures
            </h2>
            <table>
                <thead>
                    <tr>
                        <th>Departs</th>
                        <th>Service</th>
                        <th>Stop</th>
                        <th>Destination</th>
                        <th>Reachable</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: departures">
                    <tr>
                        <td data-bind="text: DepartsIn"></td>
                        <td data-bind="text: Service"></td>
                        <td data-bind="text: BusStop"></td>
                        <td data-bind="text: Destination"></td>
                        <td data-bind="text: Reachable"></td>
                    </tr>
                </tbody>
            </table>
            <p>Updated: <span data-bind="text: lastUpdated"></span></p>
            <button data-bind="click: refreshDepartures">Refresh</button>
        </div>
        <div data-bind="if: locker()">
            Loading...
        </div>
    </div>
    @Scripts.Render("~/bundles/departures")
    <script>
        //(function ($, ko) {

        //    function BusDepartureViewModel() {
        //        // Data
        //        var self = this;
        //        context = self;
        //        self.locker = ko.observable(false);

        //        self.routes = ko.observableArray([]);
        //        self.selectedRoute = ko.observable();
        //        self.departures = ko.observableArray([]);

        //        self.addRoute = function (name) {
        //            self.routes.push(name);
        //        };

        //        self.getRoutes = function () {
        //            $.getJSON("DepartureApi/RoutesJson"
        //                ).done(function (data) {
        //                    $.each(data.Routes, function (key, value) {
        //                        model.addRoute(value);
        //                    });
        //                    model.selectedRoute("");
        //                }).fail(function () {
        //                    console.log('fail');
        //                });
        //        };

        //        self.addDeparture = function (departsIn, service, busStop, destination, reachable) {
        //            self.departures.push({ DepartsIn: departsIn, Service: service, BusStop: busStop, Destination: destination, Reachable: reachable });
        //        };

        //        self.getDepartures = function (route) {
        //            self.departures = ko.observableArray();
        //            if (route) {
        //                self = this;
        //                context.locker(true); //lock list
        //                $.getJSON("DepartureApi/DeparturesJson", { routeName: route }
        //                    ).done(function (data) {
        //                        $.each(data.Departures, function (key, value) {
        //                            model.addDeparture(value.DepartsIn, value.Service, value.BusStop, value.Destination, value.Reachable);
        //                        });
        //                        self.lastUpdated(data.Timestamp);
        //                        self.departureRoute(data.Route);
        //                    }).fail(function () {
        //                        console.log("fail");
        //                    }).always(function () {
        //                        context.locker(false);  //unlock list
        //                    });
        //            }
        //        };

        //        /// The route name for the displayed departures
        //        self.departureRoute = ko.observable('');
        //        /// The server time the departures were last updated
        //        self.lastUpdated = ko.observable('');

        //        self.itemsTrigger = ko.computed(function () {
        //            return self.getDepartures(self.selectedRoute());
        //        }, this);
        //    }

        //    var model = new BusDepartureViewModel();
        //    ko.applyBindings(model);
        //    model.getRoutes();
        //})($, ko);
        var routesApiUrl = '@Url.Action("RoutesJson", "DepartureApi")',
            departureApiUrl = '@Url.Action("DeparturesJson", "DepartureApi")';

        var model = new BusDepartureViewModel(routesApiUrl, departureApiUrl);
        ko.applyBindings(model);
        model.getRoutes();
    </script>
</body>
</html>
